- hosts: exchange_mailbox
  gather_facts: no
  vars:
    exchange_source_root: d:\
    exchange_disk_image_path: c:\exch\ExchangeServer2016-x64-cu3.iso
    exchange_org_name: testorg
    exchange_schema_version_map:
      15.01.0544.027:
        name: Exchange 2016 CU3
        schema_ver: 15326
        system_ver: 13236
        org_ver: 16212
      15.01.0466.034:
        name: Exchange 2016 CU2
        schema_ver: 15325
        system_ver: 13236
        org_ver: 16212
      15.01.0396.030:
        name: Exchange 2016 CU1
        schema_ver: 15323
        system_ver: 13236
        org_ver: 16211
      15.01.0225.042:
        name: Exchange 2016 RTM
        schema_ver: 15317
        system_ver: 13236
        org_ver: 16210
  tasks:
  - name: ensure Exchange media is available
    win_disk_image: 
      image_path: "{{ exchange_disk_image_path }}"
    register: diskimage_out
 
  - name: set source media var
    set_fact:
      exchange_source_root: diskimage_out.mount_path
     
  - name: ensure prerequisite Windows Features are installed
    win_feature:
      name: Server-Media-Foundation, AS-HTTP-Activation, Desktop-Experience, NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, RSAT-Clustering-Mgmt, RSAT-Clustering-PowerShell, Web-Mgmt-Console, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation, RSAT-ADDS
      state: present
    async: 3600
    poll: 5
    register: feature_out

  - win_reboot:
    when: feature_out.restart_needed == true

  # If we rebooted, wait awhile for Windows post-reboot feature servicing (which can trigger further reboots without our knowledge).
  # Should be a way to detect servicing-in-progress so we don't have to wait arbitrarily; see:
  # https://windowsserver.uservoice.com/forums/301869-powershell/suggestions/16277737-block-winrm-operations-during-servicing
  - name: wait for servicing stability
    local_action: shell sleep 200
    changed_when: false
    when: feature_out.restart_needed == true

  - name: ensure prerequisite packages are installed
    win_chocolatey:
      name: "{{ item }}"
      state: present
      allow_empty_checksums: yes
      ignore_checksums: yes
    async: 3600
    poll: 5
    with_items:
    - dotnet4.6.1
    - ucma4

#  - name: request queued update of ngen assemblies
#    win_shell: c:\Windows\Microsoft.NET\Framework64\v4.0.30319\ngen.exe update /queue
#    changed_when: false

#  - name: ensure ngen queue is drained
#    win_shell: c:\Windows\Microsoft.NET\Framework64\v4.0.30319\ngen.exe executeQueuedItems
#    changed_when: false

#  - win_get_url:
#      url: https://download.microsoft.com/download/C/6/C/C6C10C1B-EFD8-4AE7-AEE1-C04F45869F5D/ExchangeServer2016-x64-CU2.iso
#      dest: c:\ExchangeServer2016-x64-CU2.iso

  - name: Get installed Exchange server info
    win_exchange_facts:
    ignore_errors: true
    register: exchfacts

  - name: Get Exchange org container version
    win_shell: (Get-ADObject -Filter 'ObjectClass -eq "msExchOrganizationContainer"' -SearchBase "CN={{ exchange_org_name  }},CN=Microsoft Exchange,CN=Services,$(([adsi]"LDAP://rootDSE").configurationNamingContext.Value)" -Properties "objectversion").ObjectVersion
    ignore_errors: true
    changed_when: false
    register: org_objectversion_out
    tags:
    - checkad

  - name: Ensure AD Prep
    async: 7200
    poll: 60
    win_shell: echo "do ad install"  # '{{ exchange_source_root }}\setup.exe /PrepareAD /on:"{{ exchange_org_name }}" /IAcceptExchangeServerLicenseTerms'
    run_once: yes
    # schema version from table at https://technet.microsoft.com/en-us/library/bb125224(v=exchg.160).aspx#Anchor_4
    # TODO: add schema/system_ver checks as well
    when: org_objectversion_out | failed or org_objectversion_out.stdout | int < (exchange_schema_version_map[exchange_build_version].org_ver | default(0))
    tags:
    - never

  - name: Get Exchange build version from install media
    win_file_version:
      path: '{{ exchange_source_root }}setup.exe'
    register: install_media_file_version_out

  - name: set install/upgrade
    set_fact:
      exchange_install_needed: "{{ exchfacts | failed or exchange_facts.ServerRole != 'Mailbox' }}"
      exchange_upgrade_needed: "{{ exchange_build_version | default(0) != 0 and exchange_build_version | version_compare(install_media_file_version_out.win_file_version.product_version, '<') }}"

  - name: Install Exchange mailbox role
    async: 7200
    poll: 60
    win_shell: echo "do mailbox install"  # '{{ exchange_source_root }}setup.exe /mode:install /role:mailbox /on:"{{ exchange_org_name }}" /IAcceptExchangeServerLicenseTerms'
    register: installmailbox_out
    when: exchange_install_needed

  - name: Upgrade Exchange mailbox role
    async: 7200
    poll: 60
    win_shell: echo "do mailbox upgrade" # '{{ exchange_source_root }}setup.exe /mode:upgrade /role:mailbox /on:"{{ exchange_org_name }}" /IAcceptExchangeServerLicenseTerms'
    register: upgrademailbox_out
    when: exchange_upgrade_needed and not exchange_install_needed

  - name: Reboot if changes were applied
    win_reboot:
    when: installmailbox_out | changed or upgrademailbox_out | changed

